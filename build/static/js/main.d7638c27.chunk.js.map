{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","classes","qrRef","useRef","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVAyFA,IAAMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,UAAW,CACTC,UAAW,IAEbC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAa,SACbC,WAAY,UACZC,MAAO,OACPC,QAAS,IAEXC,IAAM,CACJR,UAAW,GACXS,aAAc,QAGLC,EApGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAG+BJ,mBAAS,IAHxC,mBAGNK,EAHM,KAGUC,EAHV,OAIoCN,mBAAS,IAJ7C,mBAINO,EAJM,KAIYC,EAJZ,KAKPC,EAAUxB,IACVyB,EAAQC,iBAAO,MAGfC,EAAc,uCAAG,4BAAAC,EAAA,+EAEQC,IAAOC,UAAUd,GAFzB,OAETe,EAFS,OAGfZ,EAAYY,GAHG,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDA2BpB,OACE,cAACC,EAAA,EAAD,CAAWC,UAAWX,EAAQrB,UAA9B,SACM,eAACiC,EAAA,EAAD,WACI,oBAAID,UAAWX,EAAQnB,MAAvB,4DACA,cAACgC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACI,cAACC,EAAA,EAAD,CAAWC,MAAM,kBAAkBC,SAAU,SAACC,GAAD,OAAOjC,EAAQiC,EAAEC,OAAOC,UACrE,cAACC,EAAA,EAAD,CAAQlB,UAAWX,EAAQZ,IAAK0C,QAAQ,YACtC5C,MAAM,UAAU6C,QAAS,kBAAM5B,KADjC,sBAEE,uBACA,uBACA,uBACCT,EACC,mBAAGsC,KAAMtC,EAAUuC,UAAQ,EAA3B,SACI,qBAAKC,IAAKxC,EAAUyC,IAAI,UACpB,QAEhB,eAACrB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACE,cAACO,EAAA,EAAD,CAAQlB,UAAWX,EAAQZ,IAAK0C,QAAQ,YAAY5C,MAAM,YAAY6C,QA9BzE,WACjB9B,EAAMmC,QAAQC,mBA6BM,0BACA,cAAC,IAAD,CACEC,IAAKrC,EACLsC,MAAO,IACPC,MAAO,CAACC,MAAO,QACfC,QA3CA,SAACC,GACvBnC,QAAQC,IAAIkC,IA2CUC,OAzCD,SAACC,GAChBA,GACAhD,EAAkBgD,IAwCFC,YAAU,IAEZ,gDAAmBlD,QAErB,eAACkB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACG,yDACA,cAAC,IAAD,CACAiB,MAAO,IACPC,MAAO,CAACC,MAAO,QACfC,QA3CG,SAACC,GACzBnC,QAAQC,IAAIkC,IA2CSC,OAzCE,SAACC,GACpBA,GACA9C,EAAoB8C,MAyCH,0DAA6B/C,mBCpEvCiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7638c27.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\r\nimport {Container, Card, CardContent, makeStyles, Grid, TextField, Button} from '@material-ui/core';\r\nimport QRCode from 'qrcode';\r\nimport QrReader from 'react-qr-reader';\r\n\r\n\r\nfunction App() { \r\n  const [text, setText] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [scanResultFile, setScanResultFile] = useState('');\r\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n\r\n\r\n  const generateQrCode = async () => {\r\n    try {\r\n          const response = await QRCode.toDataURL(text);\r\n          setImageUrl(response);\r\n    }catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  }\r\n  const handleScanFile = (result) => {\r\n      if (result) {\r\n          setScanResultFile(result);\r\n      }\r\n  }\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  }\r\n  const handleErrorWebCam = (error) => {\r\n    console.log(error);\r\n  }\r\n  const handleScanWebCam = (result) => {\r\n    if (result){\r\n        setScanResultWebCam(result);\r\n    }\r\n   }\r\n  return (\r\n    <Container className={classes.conatiner}>\r\n          <Card>\r\n              <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\r\n              <CardContent>\r\n                  <Grid container spacing={2}>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                          <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\r\n                          <Button className={classes.btn} variant=\"contained\" \r\n                            color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\r\n                            <br/>\r\n                            <br/>\r\n                            <br/>\r\n                            {imageUrl ? (\r\n                              <a href={imageUrl} download>\r\n                                  <img src={imageUrl} alt=\"img\"/>\r\n                              </a>) : null}\r\n                      </Grid>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                        <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\r\n                        <QrReader\r\n                          ref={qrRef}\r\n                          delay={300}\r\n                          style={{width: '100%'}}\r\n                          onError={handleErrorFile}\r\n                          onScan={handleScanFile}\r\n                          legacyMode\r\n                        />\r\n                        <h3>Scanned Code: {scanResultFile}</h3>\r\n                      </Grid>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                         <h3>Qr Code Scan by Web Cam</h3>\r\n                         <QrReader\r\n                         delay={300}\r\n                         style={{width: '100%'}}\r\n                         onError={handleErrorWebCam}\r\n                         onScan={handleScanWebCam}\r\n                         />\r\n                         <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\r\n                      </Grid>\r\n                  </Grid>\r\n              </CardContent>\r\n          </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    conatiner: {\r\n      marginTop: 10\r\n    },\r\n    title: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems:  'center',\r\n      background: '#3f51b5',\r\n      color: '#fff',\r\n      padding: 20\r\n    },\r\n    btn : {\r\n      marginTop: 10,\r\n      marginBottom: 20\r\n    }\r\n}));\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}